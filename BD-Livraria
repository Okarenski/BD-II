-- Criação do esquema (opcional)
CREATE SCHEMA livraria;
SET search_path TO livraria;

-- Tabela de livros
CREATE TABLE livros (
    id_livro SERIAL PRIMARY KEY,
    titulo VARCHAR(200) NOT NULL,
    autor VARCHAR(150) NOT NULL,
    preco NUMERIC(10,2) NOT NULL CHECK (preco >= 0),
    quantidade_estoque INT NOT NULL CHECK (quantidade_estoque >= 0)
);

-- Tabela de clientes
CREATE TABLE clientes (
    id_cliente SERIAL PRIMARY KEY,
    nome VARCHAR(150) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL
);

-- Tabela de pedidos
CREATE TABLE pedidos (
    id_pedido SERIAL PRIMARY KEY,
    id_cliente INT NOT NULL,
    data_pedido TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) DEFAULT 'Pendente',
    CONSTRAINT fk_pedido_cliente FOREIGN KEY (id_cliente)
        REFERENCES clientes (id_cliente) ON DELETE RESTRICT
);

-- Tabela de itens do pedido
CREATE TABLE itens_pedido (
    id_item SERIAL PRIMARY KEY,
    id_pedido INT NOT NULL,
    id_livro INT NOT NULL,
    quantidade INT NOT NULL CHECK (quantidade > 0),
    preco_unitario NUMERIC(10,2) NOT NULL CHECK (preco_unitario >= 0),
    status_item VARCHAR(50) DEFAULT 'Pendente',
    CONSTRAINT fk_item_pedido FOREIGN KEY (id_pedido)
        REFERENCES pedidos (id_pedido) ON DELETE CASCADE,
    CONSTRAINT fk_item_livro FOREIGN KEY (id_livro)
        REFERENCES livros (id_livro) ON DELETE RESTRICT
);

-- Tabela de log de auditoria
CREATE TABLE log_auditoria (
    id_log SERIAL PRIMARY KEY,
    tabela_afetada VARCHAR(100) NOT NULL,
    id_registro_afetado INT NOT NULL,
    operacao VARCHAR(50) NOT NULL,
    valor_antigo TEXT,
    valor_novo TEXT,
    data_operacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Populando a tabela de livros
INSERT INTO livros (titulo, autor, preco, quantidade_estoque) VALUES
('Clean Code', 'Robert C. Martin', 120.00, 15),
('Introdução a Algoritmos', 'Thomas H. Cormen', 250.00, 10),
('Python para Iniciantes', 'Ana Souza', 80.00, 30),
('Banco de Dados Essencial', 'Carlos Henrique', 95.50, 20),
('Arquitetura de Computadores', 'Andrew S. Tanenbaum', 180.00, 12);

-- Populando a tabela de clientes
INSERT INTO clientes (nome, email) VALUES
('João Silva', 'joao.silva@EXEMPLO.COM'),
('Maria Oliveira', 'maria.oliveira@Exemplo.com'),
('Pedro Santos', 'pedro.santos@teste.com'),
('Ana Costa', 'ana.costa@teste.com'),
('Lucas Pereira', 'lucas.pereira@teste.com');

-- Populando a tabela de pedidos
INSERT INTO pedidos (id_cliente, data_pedido, status) VALUES
(1, '2025-08-01 10:15:00', 'Pendente'),
(2, '2025-08-02 14:30:00', 'Pendente'),
(3, '2025-08-05 09:45:00', 'Enviado'),
(1, '2025-08-07 16:20:00', 'Pendente'),
(4, '2025-08-09 11:00:00', 'Pendente');

-- Populando a tabela de itens_pedido
INSERT INTO itens_pedido (id_pedido, id_livro, quantidade, preco_unitario, status_item) VALUES
(1, 1, 1, 120.00, 'Pendente'),
(1, 3, 2, 80.00, 'Pendente'),
(2, 2, 1, 250.00, 'Pendente'),
(2, 5, 1, 180.00, 'Pendente'),
(3, 4, 2, 95.50, 'Enviado'),
(4, 1, 1, 120.00, 'Pendente'),
(4, 2, 1, 250.00, 'Pendente'),
(5, 3, 1, 80.00, 'Pendente');

-- Populando a tabela de log_auditoria (exemplo inicial, triggers depois vão preencher de verdade)
INSERT INTO log_auditoria (tabela_afetada, id_registro_afetado, operacao, valor_antigo, valor_novo) VALUES
('livros', 1, 'UPDATE', '{"preco":120.00}', '{"preco":130.00}'),
('clientes', 2, 'INSERT', NULL, '{"email":"maria.oliveira@Exemplo.com"}');

CREATE OR REPLACE FUNCTION cliente_verificar_delete()
RETURNS TRIGGER AS $$
BEGIN
	IF EXISTS (SELECT 1 FROM pedidos WHERE id_cliente = id_pedido) THEN
	RAISE EXCEPTION 'Cliente não pode ser deletado pois efetuou pedido';
	END IF;

	RETURN OLD;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER cliente_delete_pedido
BEFORE DELETE
ON clientes
EXECUTE FUNCTION cliente_verificar_delete();

DELETE FROM clientes WHERE id_cliente = 1;

CREATE OR REPLACE FUNCTION att_status_enviado()
RETURNS TRIGGER AS $$
BEGIN
	IF NEW.status_item = 'Enviado' THEN
		UPDATE pedidos SET status = 'Concluido' WHERE id_pedido = NEW.id_pedido;
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE plpgsql;	

CREATE OR REPLACE TRIGGER att_status_pedido
AFTER UPDATE OF status_item ON itens_pedido
FOR EACH ROW
EXECUTE FUNCTION att_status_enviado();

SELECT * FROM itens_pedido;
SELECT * FROM pedidos;

UPDATE itens_pedido SET status_item = 'Enviado' WHERE id_item = 4;
